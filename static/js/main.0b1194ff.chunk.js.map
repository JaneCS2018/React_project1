{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","alias","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b1194ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Business.css';\n\n\n\nclass Business extends React.Component {\n    render(){\n\n    return (\n        <div className=\"Business\">\n            <div className=\"image-container\">\n                <img src={this.props.business.imageSrc} alt=''/>\n            </div>\n            <h2>{this.props.business.name}</h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                    <p>{this.props.business.address}</p>\n                    <p>{this.props.business.city}</p>\n                    <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\n                </div>\n                <div className=\"Business-reviews\">\n                    <h3>{this.props.business.category.toUpperCase()}</h3>\n                    <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n                    <p>{`${this.props.business.reviewCount} reviews`}</p>\n                </div>\n            </div>\n        </div>\n      );\n    }\n}\n\nexport default Business;\n\n\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component{\n    render(){\n        return(\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses ? this.props.businesses.map((business) => {\n                            return <Business business={business} key={business.id} />\n                        }\n                    ) : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;\n","import React, { Component } from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy:'best_match'\n        };\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        };\n    }\n\n    getSortByClass(sortByOption){\n        if (this.state.sortBy === sortByOption){\n            return 'active';\n        }\n        return '';\n    }\n\n    handleSortByChange(sortByOption){\n        this.setState({sortBy: sortByOption});\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    handleLocationChange(event){\n        this.setState({location: event.target.value});\n    }\n\n    handleSearch(event){\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return (<li className={this.getSortByClass(sortByOptionValue)}\n                        key={sortByOptionValue}\n                        onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                        {sortByOption}\n                    </li>);\n        });\n    }\n\n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange}/>\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","const apiKey = 'JacknhCxtBeOyrNMtNQHDZbuGbTapUAgxJsa_QjdbcGnlrvDrKs2jDe2o68j1zQ-JhnKvzFq17TebDq4JgOlpzVQNsQ1vPm09KKBovfHUKxh936SsgOqkdsYSf10XHYx';\nconst Yelp = {\n    search(term, location, sortBy){\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers : {Authorization : `Bearer ${apiKey}`}\n        }).then(\n            (response) => {return response.json();\n            }).then((jsonResponse) => {\n            if(jsonResponse.businesses){\n                // console.log(jsonResponse.businesses);\n                return jsonResponse.businesses.map((business) => {\n                    return {\n                        id : business.id,\n                        imageSrc: business.image_url,\n                        name : business.alias,\n                        address : business.location.address1,\n                        city : business.location.city,\n                        state : business.location.state,\n                        zipCode : business.location.zip_code,\n                        category : business.categories[0].title,\n                        rating : business.rating,\n                        reviewCount : business.review_count,\n                    }\n                });\n            }\n            // throw new Error('Request failed!');\n        })\n\n    }\n};\n\nexport default Yelp;\n\n","import React from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            businesses: []\n        };\n\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n\n    searchYelp(term, location, sortBy) {\n        Yelp.search(term, location, sortBy).then((businesses) => {\n            this.setState({businesses: businesses});\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>ravenous</h1>\n                <SearchBar searchYelp={this.searchYelp} />\n                <BusinessList businesses={this.state.businesses} />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}